{
  "name": "Medusajs",
  "tagline": "Medusa JS is a Promise based caching library",
  "body": "# MedusaJS\r\nA Promise based caching library for node or the browser.\r\n\r\nPass in a cache key, a promise executor and optionally a cache length and get back a cached object.\r\n\r\n## Installation\r\n\r\n    npm install medusajs\r\n\r\n## Usage\r\n\r\n\r\n```javascript\r\nvar Medusa = require('medusajs');\r\n\r\nfunction ex() {\r\n  return Medusa.get('sample', function(resolve, reject) {\r\n    console.log('cache miss');\r\n    resolve('example');\r\n  }, 1000);\r\n}\r\n\r\n\r\nex().then(res => {\r\n  console.log(res);\r\n});\r\n\r\nex().then(res => {\r\n  console.log(res);\r\n});\r\n\r\nex().then(res => {\r\n  console.log(res);\r\n});\r\n\r\n/* returns:\r\ncache miss\r\nexample\r\nexample\r\nexample */\r\n\r\n```\r\n\r\n## API\r\n\r\n### get = function(key, promise, policy)\r\n\r\nThe function will lookup and resolve the value for the previously resolved promise,\r\nif no entry is in the cache the function will resolve the promise and resolve that.\r\n\r\n_rejected promises are not cached._\r\n\r\nThe policy value will set the duration of the cache, if no policy is set the object will be cache until cleared manually.\r\n\r\n### put = function(key, value, policy)\r\n\r\nBypass the get function and store an object directly into the cache.\r\n\r\n### clear = function(key)\r\n\r\nClear a cached item, if no key is set all items will be cleared. Returns true if an item was cleared.\r\n\r\n_You may also clear cache items using a wildcard characters e.g. Medusa.clear('sample*')_\r\n\r\n### settings = function(newSettings)\r\n\r\nSend in an updated settings object:\r\n\r\n* debug: _will output logging_\r\n* returnMutator: _a function to mutate the return value for output (good for using something like lodash.cloneDeep)_\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}